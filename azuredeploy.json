{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "0.0.0.3",
  "parameters": {
    "environmentName": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": ["dev", "qa", "staging", "prod"]
    },
    "acrResourceGroupName": {
      "type": "string"
    },
    "deliveryIdName": {
      "metadata": {
        "description": "Name of the delivery managed identity"
      },
      "type": "string"
    },
    "deliveryPrincipalId": {
      "metadata": {
        "description": "Principal id for the delivery managed identity"
      },
      "type": "string"
    },
    "droneSchedulerIdName": {
      "metadata": {
        "description": "Name of the drone scheduler managed identity"
      },
      "type": "string"
    },
    "droneSchedulerPrincipalId": {
      "metadata": {
        "description": "Principal id for the drone scheduler managed identity"
      },
      "type": "string"
    },
    "workflowIdName": {
      "metadata": {
        "description": "Name of the workflow managed identity"
      },
      "type": "string"
    },
    "workflowPrincipalId": {
      "metadata": {
        "description": "Principal id for the workflow managed identity"
      },
      "type": "string"
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "servicePrincipalClientId": {
        "metadata": {
            "description": "Client ID (used by cloudprovider)"
        },
        "type": "string"
    },
    "servicePrincipalClientSecret": {
        "metadata": {
            "description": "The Service Principal Client Secret."
        },
        "type": "securestring"
    },
    "servicePrincipalId": {
        "metadata": {
            "description": "Principal ID (used by cloudprovider)"
        },
        "type": "string"
    },
    "osType": {
      "type": "string",
      "defaultValue": "Linux",
      "allowedValues": ["Linux"],
      "metadata": {
        "description": "The type of operating system."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      },
      "minValue": 0,
      "maxValue": 1023
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Linux Virtual Machines."
      },
      "defaultValue": "azureuser"
    },
    "kubernetesVersion": {
      "type": "string",
      "metadata": {
        "description": "The version of Kubernetes. It must be supported in the target location."
      }
    },
    "deliveryRedisStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": ["Standard_LRS", "Standard_ZRS", "Standard_GRS"],
      "metadata": {
        "description": "Type of the storage account that will store Redis Cache."
      }
    },
    "deliveryRedisDiagnosticsEnabled": {
      "type": "bool",
      "allowedValues": [false, true],
      "defaultValue": false,
      "metadata": {
        "description": "A value that indicates whether diagnostics should be saved to the specified storage account."
      }
    }
  },
  "variables": {
    "clusterNamePrefix": "aks",
    "acrNamePrefix": "acr",
    "aiNamePrefix": "ai",
    "acrName": "[uniqueString(variables('acrNamePrefix'),resourceGroup().id)]",
    "readerRoleObjectId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
    "managedIdentityOperatorRoleObjectId": "f1a07417-d97a-45cb-824c-7a7467783830",
    "readerRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('readerRoleObjectId'))]",
    "managedIdentityOperatorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('managedIdentityOperatorRoleObjectId'))]",
    "deliveryRedisStorageName": "[concat(parameters('environmentName'),'rsto',uniqueString(resourceGroup().id))]",
    "nestedACRDeploymentName": "[concat('azuredeploy-acr-',parameters('acrResourceGroupName'),parameters('environmentName'))]",
    "aksLogAnalyticsNamePrefix": "logsAnalytics",
    "monitoringMetricsPublisherRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')]",
    "acrPullRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
    "virtualMachineContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
    "nodeResourceGroupName": "[concat('rg-', variables('environmentSettings')[parameters('environmentName')].aksClusterName, '-nodepools')]",
    "environmentSettings": {
      "dev": {
        "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
        "acrName": "[variables('acrName')]",
        "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
        "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
        "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
        "deliveryRedisCacheSKU": "Basic",
        "deliveryRedisCacheFamily": "C",
        "deliveryRedisCacheCapacity": 0,
        "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
        "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
        "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionServiceAccessKey": "IngestionServiceAccessKey",
        "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
        "workflowServiceAccessKey": "WorkflowServiceAccessKey",
        "agentCount": 2,
        "agentVMSize": "Standard_D2_v2",
        "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
        "workspaceSku": "Free",
        "workspaceRetentionInDays": null
      },
      "qa": {
        "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
        "acrName": "[variables('acrName')]",
        "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
        "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
        "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
        "deliveryRedisCacheSKU": "Basic",
        "deliveryRedisCacheFamily": "C",
        "deliveryRedisCacheCapacity": 0,
        "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
        "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
        "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionServiceAccessKey": "IngestionServiceAccessKey",
        "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
        "workflowServiceAccessKey": "WorkflowServiceAccessKey",
        "agentCount": 3,
        "agentVMSize": "Standard_D2_v2",
        "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
        "workspaceSku": "Free",
        "workspaceRetentionInDays": null
      },
      "staging": {
        "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
        "acrName": "[variables('acrName')]",
        "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
        "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
        "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
        "deliveryRedisCacheSKU": "Standard",
        "deliveryRedisCacheFamily": "C",
        "deliveryRedisCacheCapacity": 1,
        "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
        "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
        "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionServiceAccessKey": "IngestionServiceAccessKey",
        "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
        "workflowServiceAccessKey": "WorkflowServiceAccessKey",
        "agentCount": 3,
        "agentVMSize": "Standard_D2_v2",
        "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
        "workspaceSku": "PerGB2018",
        "workspaceRetentionInDays": 730
      },
      "prod": {
        "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
        "acrName": "[concat(parameters('environmentName'),variables('acrName'))]",
        "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
        "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
        "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
        "deliveryRedisCacheSKU": "Standard",
        "deliveryRedisCacheFamily": "C",
        "deliveryRedisCacheCapacity": 1,
        "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
        "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
        "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
        "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
        "ingestionServiceAccessKey": "IngestionServiceAccessKey",
        "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
        "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
        "workflowServiceAccessKey": "WorkflowServiceAccessKey",
        "agentCount": 3,
        "agentVMSize": "Standard_D2_v2",
        "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
        "workspaceSku": "PerGB2018",
        "workspaceRetentionInDays": 730
      }
    }
  },
  "resources": [
    {
      "name": "[variables('nestedACRDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "resourceGroup": "[parameters('acrResourceGroupName')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "name": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2017-10-01",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "location": "[resourceGroup().location]",
              "tags": {
                "displayName": "Container Registry",
                "container.registry": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
                "clusterName": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]"
              },
              "properties": {
                "adminUserEnabled": false
              }
            },
            {
              "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
              "apiVersion": "2018-09-01-preview",
              "name": "[concat(variables('acrName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('acrPullRole')))]",
              "dependsOn": [
                "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName)]"
              ],
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "acrId": {
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('environmentSettings')[parameters('environmentName')].acrName)]",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[variables('environmentSettings')[parameters('environmentName')].workspaceName]",
      "apiVersion": "2015-11-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "retentionInDays": "[variables('environmentSettings')[parameters('environmentName')].workspaceRetentionInDays]",
        "sku": {
          "Name": "[variables('environmentSettings')[parameters('environmentName')].workspaceSku]"
        },
        "features": {
          "searchVersion": 1
        }
      }
    },
    {
      "name": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "environment": "shared cluster"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('environmentSettings')[parameters('environmentName')].workspaceName)]"
      ],
      "properties": {
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "nodeResourceGroup": "[variables('nodeResourceGroupName')]",
        "dnsPrefix": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[variables('environmentSettings')[parameters('environmentName')].agentCount]",
            "vmSize": "[variables('environmentSettings')[parameters('environmentName')].agentVMSize]",
            "osType": "[parameters('osType')]",
            "storageProfile": "ManagedDisks",
            "mode": "System"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshRSAPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
            "clientId": "[parameters('servicePrincipalClientId')]",
            "secret": "[parameters('servicePrincipalClientSecret')]"
        },
        "addonProfiles": {
          "omsagent": {
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('environmentSettings')[parameters('environmentName')].workspaceName)]"
            },
            "enabled": true
          }
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "name": "[variables('environmentSettings')[parameters('environmentName')].appInsightsName]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "kind": "other",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "App Insights instance - Distributed Tracing",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "Application_Type": "other"
      }
    },
    {
      "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageName]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used by Delivery Redis",
      "dependsOn": [],
      "tags": {
        "displayName": "Storage account for inflight deliveries",
        "app": "fabrikam-delivery",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "accountType": "[parameters('deliveryRedisStorageType')]"
      }
    },
    {
      "apiVersion": "2018-03-01",
      "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisName]",
      "type": "Microsoft.Cache/Redis",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Redis Cache for inflight deliveries",
        "app": "fabrikam-delivery",
        "environment": "[parameters('environmentName')]"
      },
      "dependsOn": [
        "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageId]"
      ],
      "properties": {
        "redisEnableNonSslPort": "false",
        "sku": {
          "capacity": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheCapacity]",
          "family": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheFamily]",
          "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheSKU]"
        }
      },
      "resources": [
        {
          "apiVersion": "2017-05-01-preview",
          "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
          "name": "[concat(variables('environmentSettings')[parameters('environmentName')].deliveryRedisName, '/Microsoft.Insights/', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
          ],
          "properties": {
            "storageAccountId": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageId]",
            "logs": [],
            "metrics": [
              {
                "timeGrain": "AllMetrics",
                "enabled": "[parameters('deliveryRedisDiagnosticsEnabled')]",
                "retentionPolicy": {
                  "days": 90,
                  "enabled": "[parameters('deliveryRedisDiagnosticsEnabled')]"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
      "apiVersion": "2016-03-31",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Delivery Cosmos Db",
        "app": "fabrikam-delivery",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0
          }
        ]
      }
    },
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "MongoDB",
      "name": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Package Cosmos Db",
        "app": "fabrikam-package",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "databaseAccountOfferType": "Standard",
        "name": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
      "apiVersion": "2015-04-08",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0
          }
        ]
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "tags": {
        "displayName": "Ingestion and Workflow Service Bus",
        "app": "fabrikam-ingestion",
        "app-producer": "fabrikam-ingestion",
        "app-consumer": "fabrikam-workflow",
        "environment": "[parameters('environmentName')]"
      },
      "resources": [
        {
          "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]",
          "type": "queues",
          "apiVersion": "2017-04-01",
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": "1024",
            "enablePartitioning": "true"
          }
        },
        {
          "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionServiceAccessKey]",
          "type": "AuthorizationRules",
          "apiVersion": "2017-04-01",
          "properties": {
            "rights": ["Send"]
          },
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
          ]
        },
        {
          "name": "[variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey]",
          "type": "AuthorizationRules",
          "apiVersion": "2017-04-01",
          "properties": {
            "rights": ["Listen"]
          },
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageId]"
      ],
      "tags": {
        "displayName": "Delivery Key Vault",
        "app": "fabrikam-delivery",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('deliveryPrincipalId')]",
            "permissions": {
              "secrets": ["get", "list"]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[variables('readerRoleObjectId')]",
            "permissions": {
              "secrets": ["get", "list"]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "secrets",
          "name": "CosmosDB-Endpoint",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName)).documentEndpoint]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
            "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDB-Key",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName), '2016-03-31').primaryMasterKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
            "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "Redis-Endpoint",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)).hostName]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
            "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "Redis-AccessKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName), '2016-04-01').primaryKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
            "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "ApplicationInsights--InstrumentationKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
            "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "DroneScheduler Key Vault",
        "app": "fabrikam-dronescheduler",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('droneSchedulerPrincipalId')]",
            "permissions": {
              "secrets": ["get", "list"]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "secrets",
          "name": "ApplicationInsights--InstrumentationKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
            "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBEndpoint",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)).documentEndpoint]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName), '2016-03-31').primaryMasterKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBConnectionMode",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "Gateway"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBConnectionProtocol",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "Https"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBMaxConnectionsLimit",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "50"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBMaxParallelism",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "-1"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "CosmosDBMaxBufferedItemCount",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "0"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "FeatureManagement--UsePartitionKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "false"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Workflow Key Vault",
        "app": "fabrikam-workflow",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('workflowPrincipalId')]",
            "permissions": {
              "secrets": ["get", "list"]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "secrets",
          "name": "QueueName",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "QueueEndpoint",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)).serviceBusEndpoint]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
            "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
          ]
        },
        {
          "type": "secrets",
          "name": "QueueAccessPolicyName",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
          ]
        },
        {
          "type": "secrets",
          "name": "QueueAccessPolicyKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[listkeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace, variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey), '2017-04-01').primaryKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
            "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace, variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey)]"
          ]
        },
        {
          "type": "secrets",
          "name": "ApplicationInsights-InstrumentationKey",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
            "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "name": "[concat(variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName,'/Microsoft.Authorization/',guid(concat('kv-delivery',parameters('environmentName')), resourceGroup().id))]",
      "apiVersion": "2017-05-01",
      "tags": {
        "displayName": "Delivery app RBAC Reader for Key Vault",
        "what": "rbac",
        "to": "pod",
        "identity-type": "msi",
        "access": "keyvault",
        "reason": "aad-pod-identity",
        "flex-vol": "no",
        "app": "fabrikam-delivery",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "roleDefinitionId": "[variables('readerRoleId')]",
        "principalId": "[parameters('deliveryPrincipalId')]",
        "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "name": "[concat(variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName,'/Microsoft.Authorization/',guid(concat('kv-dronescheduler',parameters('environmentName')), resourceGroup().id))]",
      "apiVersion": "2017-05-01",
      "tags": {
        "displayName": "DroneScheduler app RBAC Reader for Key Vault",
        "what": "rbac",
        "to": "pod",
        "identity-type": "msi",
        "access": "keyvault",
        "reason": "aad-pod-identity",
        "flex-vol": "no",
        "app": "fabrikam-dronescheduler",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "roleDefinitionId": "[variables('readerRoleId')]",
        "principalId": "[parameters('droneSchedulerPrincipalId')]",
        "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "name": "[concat(variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName,'/Microsoft.Authorization/',guid(concat('kv-workflow',parameters('environmentName')), resourceGroup().id))]",
      "apiVersion": "2017-05-01",
      "tags": {
        "displayName": "Workflow app RBAC Reader for Key Vault",
        "what": "rbac",
        "to": "pod",
        "identity-type": "msi",
        "access": "keyvault",
        "reason": "aad-pod-identity",
        "flex-vol": "yes",
        "app": "fabrikam-workflow",
        "environment": "[parameters('environmentName')]"
      },
      "properties": {
        "roleDefinitionId": "[variables('readerRoleId')]",
        "principalId": "[parameters('workflowPrincipalId')]",
        "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
      ]
    },
    {
      "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[concat(variables('environmentSettings')[parameters('environmentName')].aksClusterName, '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('monitoringMetricsPublisherRole')))]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName)]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('monitoringMetricsPublisherRole')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('deliveryIdName'), '/Microsoft.Authorization/', guid(concat('msi-delivery',parameters('environmentName')), resourceGroup().id))]",
      "apiVersion": "2017-05-01",
      "comments": "Grant the AKS cluster Managed Identity access to the delivery managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[concat(subscription().id, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('deliveryIdName'))]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('workflowIdName'), '/Microsoft.Authorization/', guid(concat('msi-workflow',parameters('environmentName')), resourceGroup().id))]",
      "apiVersion": "2017-05-01",
      "comments": "Grant the AKS cluster Managed Identity access to the workflow managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[concat(subscription().id, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('workflowIdName'))]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('droneSchedulerIdName'), '/Microsoft.Authorization/', guid(concat('msi-dronescheduler',parameters('environmentName')), resourceGroup().id))]",
      "apiVersion": "2017-05-01",
      "comments": "Grant the AKS cluster Managed Identity access to the drone scheduler managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[concat(subscription().id, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('droneSchedulerIdName'))]"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "EnsureClusterUserAssignedHasRbacToManageVMSS",
      "apiVersion": "2017-05-10",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName)]"
      ],
      "resourceGroup": "[variables('nodeResourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "name": "[guid(resourceGroup().id)]",
              "apiVersion": "2018-09-01-preview",
              "comments": "It is required to grant the AKS cluster with Virtual Machine Contributor role permissions over the cluster infrastructure resource group to work with Managed Identities and aad-pod-identity. Otherwise MIC component fails while attempting to update MSI on VMSS cluster nodes",
              "properties": {
                "roleDefinitionId": "[variables('virtualMachineContributorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('environmentSettings')[parameters('environmentName')].aksClusterName), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "acrName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
      "type": "string"
    },
    "aksClusterName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]",
      "type": "string"
    },
    "appInsightsName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].appInsightsName]",
      "type": "string"
    },
    "deliveryKeyVaultUri": {
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)).vaultUri]",
      "type": "string"
    },
    "deliveryCosmosDbName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
      "type": "string"
    },
    "droneSchedulerKeyVaultName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName]",
      "type": "string"
    },
    "droneSchedulerKeyVaultUri": {
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)).vaultUri]",
      "type": "string"
    },
    "droneSchedulerCosmosDbName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
      "type": "string"
    },
    "packageMongoDbName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
      "type": "string"
    },
    "workflowKeyVaultName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName]",
      "type": "string"
    },
    "ingestionQueueNamespace": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace]",
      "type": "string"
    },
    "ingestionQueueName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]",
      "type": "string"
    },
    "ingestionServiceAccessKeyName": {
      "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionServiceAccessKey]",
      "type": "string"
    },
    "acrDeploymentName": {
      "value": "[variables('nestedACRDeploymentName')]",
      "type": "string"
    }
  }
}
